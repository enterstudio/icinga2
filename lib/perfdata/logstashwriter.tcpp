#include "base/exception.hpp"
#include "base/objectlock.hpp"
#include "base/utility.hpp"
#include "base/convert.hpp"
#include "base/dependencygraph.hpp"
#include <boost/foreach.hpp>
#include <boost/assign/list_of.hpp>
#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4244 )
#pragma warning( disable : 4800 )
#endif /* _MSC_VER */

namespace icinga
{

template class TypeImpl<LogstashWriter>;

String TypeImpl<LogstashWriter>::GetName(void) const
{
	return "LogstashWriter";
}

int TypeImpl<LogstashWriter>::GetAttributes(void) const
{
	return 0;
}

Type::Ptr TypeImpl<LogstashWriter>::GetBaseType(void) const
{
	return ConfigObject::TypeInstance;
}

int TypeImpl<LogstashWriter>::GetFieldId(const String& name) const
{
	int offset = ConfigObject::TypeInstance->GetFieldCount();

	switch (static_cast<int>(Utility::SDBM(name, 1))) {
		case 101:
			if (name == "enable_send_thresholds")
				return offset + 4;
			if (name == "enable_send_metadata")
				return offset + 5;
			if (name == "enable_legacy_mode")
				return offset + 6;

				break;
		case 104:
			if (name == "host")
				return offset + 0;
			if (name == "host_name_template")
				return offset + 2;

				break;
		case 112:
			if (name == "port")
				return offset + 1;

				break;
		case 115:
			if (name == "service_name_template")
				return offset + 3;

				break;
	}

	return ConfigObject::TypeInstance->GetFieldId(name);
}

Field TypeImpl<LogstashWriter>::GetFieldInfo(int id) const
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount();
	if (real_id < 0) { return ConfigObject::TypeInstance->GetFieldInfo(id); }
	switch (real_id) {
		case 0:
			return Field(0, "String", "host", "host", NULL, 2, 0);
		case 1:
			return Field(1, "String", "port", "port", NULL, 2, 0);
		case 2:
			return Field(2, "String", "host_name_template", "host_name_template", NULL, 2, 0);
		case 3:
			return Field(3, "String", "service_name_template", "service_name_template", NULL, 2, 0);
		case 4:
			return Field(4, "Number", "enable_send_thresholds", "enable_send_thresholds", NULL, 2, 0);
		case 5:
			return Field(5, "Number", "enable_send_metadata", "enable_send_metadata", NULL, 2, 0);
		case 6:
			return Field(6, "Number", "enable_legacy_mode", "enable_legacy_mode", NULL, 2, 0);
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

int TypeImpl<LogstashWriter>::GetFieldCount(void) const
{
	return 7 + ConfigObject::TypeInstance->GetFieldCount();
}

ObjectFactory TypeImpl<LogstashWriter>::GetFactory(void) const
{
	return TypeHelper<LogstashWriter, false>::GetFactory();
}

std::vector<String> TypeImpl<LogstashWriter>::GetLoadDependencies(void) const
{
	std::vector<String> deps;
	return deps;
}

void TypeImpl<LogstashWriter>::RegisterAttributeHandler(int fieldId, const Type::AttributeHandler& callback)
{
	int real_id = fieldId - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { ConfigObject::TypeInstance->RegisterAttributeHandler(fieldId, callback); return; }
	switch (real_id) {
		case 0:
			ObjectImpl<LogstashWriter>::OnHostChanged.connect(callback);
			break;
		case 1:
			ObjectImpl<LogstashWriter>::OnPortChanged.connect(callback);
			break;
		case 2:
			ObjectImpl<LogstashWriter>::OnHostNameTemplateChanged.connect(callback);
			break;
		case 3:
			ObjectImpl<LogstashWriter>::OnServiceNameTemplateChanged.connect(callback);
			break;
		case 4:
			ObjectImpl<LogstashWriter>::OnEnableSendThresholdsChanged.connect(callback);
			break;
		case 5:
			ObjectImpl<LogstashWriter>::OnEnableSendMetadataChanged.connect(callback);
			break;
		case 6:
			ObjectImpl<LogstashWriter>::OnEnableLegacyModeChanged.connect(callback);
			break;
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

template class ObjectImpl<LogstashWriter>;

void ObjectImpl<LogstashWriter>::Validate(int types, const ValidationUtils& utils)
{
	ConfigObject::Validate(types, utils);

	if (2 & types)
		ValidateHost(GetHost(), utils);
	if (2 & types)
		ValidatePort(GetPort(), utils);
	if (2 & types)
		ValidateHostNameTemplate(GetHostNameTemplate(), utils);
	if (2 & types)
		ValidateServiceNameTemplate(GetServiceNameTemplate(), utils);
	if (2 & types)
		ValidateEnableSendThresholds(GetEnableSendThresholds(), utils);
	if (2 & types)
		ValidateEnableSendMetadata(GetEnableSendMetadata(), utils);
	if (2 & types)
		ValidateEnableLegacyMode(GetEnableLegacyMode(), utils);
}

void ObjectImpl<LogstashWriter>::SimpleValidateHost(const String& value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidatePort(const String& value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidateHostNameTemplate(const String& value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidateServiceNameTemplate(const String& value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidateEnableSendThresholds(bool value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidateEnableSendMetadata(bool value, const ValidationUtils& utils)
{
	Value avalue = value;
}

void ObjectImpl<LogstashWriter>::SimpleValidateEnableLegacyMode(bool value, const ValidationUtils& utils)
{
	Value avalue = value;
}

ObjectImpl<LogstashWriter>::ObjectImpl(void)
{
	SetHost(GetDefaultHost(), true);
	SetPort(GetDefaultPort(), true);
	SetHostNameTemplate(GetDefaultHostNameTemplate(), true);
	SetServiceNameTemplate(GetDefaultServiceNameTemplate(), true);
	SetEnableSendThresholds(GetDefaultEnableSendThresholds(), true);
	SetEnableSendMetadata(GetDefaultEnableSendMetadata(), true);
	SetEnableLegacyMode(GetDefaultEnableLegacyMode(), true);
}

ObjectImpl<LogstashWriter>::~ObjectImpl(void)
{ }

void ObjectImpl<LogstashWriter>::SetField(int id, const Value& value, bool suppress_events, const Value& cookie)
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { ConfigObject::SetField(id, value, suppress_events, cookie); return; }
	switch (real_id) {
		case 0:
			SetHost(value, suppress_events, cookie);
			break;
		case 1:
			SetPort(value, suppress_events, cookie);
			break;
		case 2:
			SetHostNameTemplate(value, suppress_events, cookie);
			break;
		case 3:
			SetServiceNameTemplate(value, suppress_events, cookie);
			break;
		case 4:
			SetEnableSendThresholds(value, suppress_events, cookie);
			break;
		case 5:
			SetEnableSendMetadata(value, suppress_events, cookie);
			break;
		case 6:
			SetEnableLegacyMode(value, suppress_events, cookie);
			break;
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

Value ObjectImpl<LogstashWriter>::GetField(int id) const
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { return ConfigObject::GetField(id); }
	switch (real_id) {
		case 0:
			return GetHost();
		case 1:
			return GetPort();
		case 2:
			return GetHostNameTemplate();
		case 3:
			return GetServiceNameTemplate();
		case 4:
			return GetEnableSendThresholds();
		case 5:
			return GetEnableSendMetadata();
		case 6:
			return GetEnableLegacyMode();
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

void ObjectImpl<LogstashWriter>::ValidateField(int id, const Value& value, const ValidationUtils& utils)
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { ConfigObject::ValidateField(id, value, utils); return; }
	switch (real_id) {
		case 0:
			ValidateHost(value, utils);
			break;
		case 1:
			ValidatePort(value, utils);
			break;
		case 2:
			ValidateHostNameTemplate(value, utils);
			break;
		case 3:
			ValidateServiceNameTemplate(value, utils);
			break;
		case 4:
			ValidateEnableSendThresholds(value, utils);
			break;
		case 5:
			ValidateEnableSendMetadata(value, utils);
			break;
		case 6:
			ValidateEnableLegacyMode(value, utils);
			break;
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

void ObjectImpl<LogstashWriter>::NotifyField(int id, const Value& cookie)
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { ConfigObject::NotifyField(id, cookie); return; }
	switch (real_id) {
		case 0:
			NotifyHost(cookie);
			break;
		case 1:
			NotifyPort(cookie);
			break;
		case 2:
			NotifyHostNameTemplate(cookie);
			break;
		case 3:
			NotifyServiceNameTemplate(cookie);
			break;
		case 4:
			NotifyEnableSendThresholds(cookie);
			break;
		case 5:
			NotifyEnableSendMetadata(cookie);
			break;
		case 6:
			NotifyEnableLegacyMode(cookie);
			break;
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

Object::Ptr ObjectImpl<LogstashWriter>::NavigateField(int id) const
{
	int real_id = id - ConfigObject::TypeInstance->GetFieldCount(); 
	if (real_id < 0) { return ConfigObject::NavigateField(id); }
	switch (real_id) {
		default:
			throw std::runtime_error("Invalid field ID.");
	}
}

String ObjectImpl<LogstashWriter>::GetHost(void) const
{
	return m_Host;
}

String ObjectImpl<LogstashWriter>::GetPort(void) const
{
	return m_Port;
}

String ObjectImpl<LogstashWriter>::GetHostNameTemplate(void) const
{
	return m_HostNameTemplate;
}

String ObjectImpl<LogstashWriter>::GetServiceNameTemplate(void) const
{
	return m_ServiceNameTemplate;
}

bool ObjectImpl<LogstashWriter>::GetEnableSendThresholds(void) const
{
	return m_EnableSendThresholds;
}

bool ObjectImpl<LogstashWriter>::GetEnableSendMetadata(void) const
{
	return m_EnableSendMetadata;
}

bool ObjectImpl<LogstashWriter>::GetEnableLegacyMode(void) const
{
	return m_EnableLegacyMode;
}

void ObjectImpl<LogstashWriter>::SetHost(const String& value, bool suppress_events, const Value& cookie)
{
	m_Host = value;
	if (!suppress_events)
		NotifyHost(cookie);
}

void ObjectImpl<LogstashWriter>::SetPort(const String& value, bool suppress_events, const Value& cookie)
{
	m_Port = value;
	if (!suppress_events)
		NotifyPort(cookie);
}

void ObjectImpl<LogstashWriter>::SetHostNameTemplate(const String& value, bool suppress_events, const Value& cookie)
{
	m_HostNameTemplate = value;
	if (!suppress_events)
		NotifyHostNameTemplate(cookie);
}

void ObjectImpl<LogstashWriter>::SetServiceNameTemplate(const String& value, bool suppress_events, const Value& cookie)
{
	m_ServiceNameTemplate = value;
	if (!suppress_events)
		NotifyServiceNameTemplate(cookie);
}

void ObjectImpl<LogstashWriter>::SetEnableSendThresholds(bool value, bool suppress_events, const Value& cookie)
{
	m_EnableSendThresholds = value;
	if (!suppress_events)
		NotifyEnableSendThresholds(cookie);
}

void ObjectImpl<LogstashWriter>::SetEnableSendMetadata(bool value, bool suppress_events, const Value& cookie)
{
	m_EnableSendMetadata = value;
	if (!suppress_events)
		NotifyEnableSendMetadata(cookie);
}

void ObjectImpl<LogstashWriter>::SetEnableLegacyMode(bool value, bool suppress_events, const Value& cookie)
{
	m_EnableLegacyMode = value;
	if (!suppress_events)
		NotifyEnableLegacyMode(cookie);
}

void ObjectImpl<LogstashWriter>::NotifyHost(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnHostChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyPort(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnPortChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyHostNameTemplate(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnHostNameTemplateChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyServiceNameTemplate(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnServiceNameTemplateChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyEnableSendThresholds(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnEnableSendThresholdsChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyEnableSendMetadata(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnEnableSendMetadataChanged(static_cast<LogstashWriter *>(this), cookie);
}

void ObjectImpl<LogstashWriter>::NotifyEnableLegacyMode(const Value& cookie)
{
	ConfigObject *dobj = dynamic_cast<ConfigObject *>(this);
	if (!dobj || dobj->IsActive())
		OnEnableLegacyModeChanged(static_cast<LogstashWriter *>(this), cookie);
}

String ObjectImpl<LogstashWriter>::GetDefaultHost(void) const
{
	 return "127.0.0.1"; 
}

String ObjectImpl<LogstashWriter>::GetDefaultPort(void) const
{
	 return "2003"; 
}

String ObjectImpl<LogstashWriter>::GetDefaultHostNameTemplate(void) const
{
	 return "icinga2.$host.name$.host.$host.check_command$"; 
}

String ObjectImpl<LogstashWriter>::GetDefaultServiceNameTemplate(void) const
{
	 return "icinga2.$host.name$.services.$service.name$.$service.check_command$"; 
}

bool ObjectImpl<LogstashWriter>::GetDefaultEnableSendThresholds(void) const
{
	return bool();
}

bool ObjectImpl<LogstashWriter>::GetDefaultEnableSendMetadata(void) const
{
	return bool();
}

bool ObjectImpl<LogstashWriter>::GetDefaultEnableLegacyMode(void) const
{
	return bool();
}


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnHostChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnPortChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnHostNameTemplateChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnServiceNameTemplateChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnEnableSendThresholdsChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnEnableSendMetadataChanged;


boost::signals2::signal<void (const intrusive_ptr<LogstashWriter>&, const Value&)> ObjectImpl<LogstashWriter>::OnEnableLegacyModeChanged;

void ObjectImpl<LogstashWriter>::ValidateEnableLegacyMode(bool value, const ValidationUtils& utils)
{
	SimpleValidateEnableLegacyMode(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidateEnableSendMetadata(bool value, const ValidationUtils& utils)
{
	SimpleValidateEnableSendMetadata(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidateEnableSendThresholds(bool value, const ValidationUtils& utils)
{
	SimpleValidateEnableSendThresholds(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidateHost(const String& value, const ValidationUtils& utils)
{
	SimpleValidateHost(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidateHostNameTemplate(const String& value, const ValidationUtils& utils)
{
	SimpleValidateHostNameTemplate(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidatePort(const String& value, const ValidationUtils& utils)
{
	SimpleValidatePort(value, utils);
}

void ObjectImpl<LogstashWriter>::ValidateServiceNameTemplate(const String& value, const ValidationUtils& utils)
{
	SimpleValidateServiceNameTemplate(value, utils);
}

}
#ifdef _MSC_VER
#pragma warning ( pop )
#endif /* _MSC_VER */

